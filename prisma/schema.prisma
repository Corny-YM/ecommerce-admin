// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id
  firstName    String
  lastName     String
  fullName     String
  email        String   @unique
  imageUrl     String
  lastSignInAt DateTime
  createdAt    DateTime
  updatedAt    DateTime

  carts  Cart[]
  orders Order[] @relation("OrderToUser")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     OrderItem[] @relation("OrderItemToStore")
  carts      Cart[]
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  storeId String
  store   Store  @relation("StoreToBillboard", fields: [storeId], references: [id])

  categories Category[]

  @@index([storeId])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  // products Product[] @relation("CategoryToProduct")
  categoryHasProducts CategoryHasProduct[] @relation("CategoryHasProductToCategory")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  storeId String
  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])

  // products Product[]
  productHasSizes ProductHasSize[] @relation("ProductHasSizeToSize")
  carts           Cart[]
  orderItems      OrderItem[]      @relation("OrderItemToSize")

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])

  // products Product[]
  productHasColors ProductHasColor[] @relation("ProductHasColorToColor")
  carts            Cart[]
  orderItems       OrderItem[]       @relation("OrderItemToColor")

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relation
  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  // categoryId String
  // category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  images              Image[]
  carts               Cart[]
  orderItems          OrderItem[]          @relation("OrderItemToProduct")
  productHasColors    ProductHasColor[]    @relation("ProductHasColorToProduct")
  productHasSizes     ProductHasSize[]     @relation("ProductHasSizeToProduct")
  categoryHasProducts CategoryHasProduct[] @relation("CategoryHasProductToProduct")

  // @@index([categoryId])
  @@index([storeId])
}

model CategoryHasProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   Category @relation("CategoryHasProductToCategory", fields: [categoryId], references: [id])
  productId  String
  product    Product  @relation("CategoryHasProductToProduct", fields: [productId], references: [id])

  @@unique([productId, categoryId])
  @@index([categoryId])
  @@index([productId])
  @@map("category_has_products")
}

model ProductHasSize {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation("ProductHasSizeToProduct", fields: [productId], references: [id])
  sizeId    String
  size      Size    @relation("ProductHasSizeToSize", fields: [sizeId], references: [id])

  @@unique([productId, sizeId])
  @@index([sizeId])
  @@index([productId])
  @@map("product_has_sizes")
}

model ProductHasColor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation("ProductHasColorToProduct", fields: [productId], references: [id])
  colorId   String
  color     Color   @relation("ProductHasColorToColor", fields: [colorId], references: [id])

  @@unique([productId, colorId])
  @@index([colorId])
  @@index([productId])
  @@map("product_has_colors")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Cart {
  id        String   @id @default(uuid())
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation(fields: [colorId], references: [id])

  @@unique([userId, storeId, productId, sizeId, colorId])
  @@index([userId])
  @@index([sizeId])
  @@index([colorId])
  @@index([storeId])
  @@index([productId])
}

model Order {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  userId String
  user   User   @relation("OrderToUser", fields: [userId], references: [id])

  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  storeId String
  store   Store  @relation("OrderItemToStore", fields: [storeId], references: [id])

  productId String
  product   Product @relation("OrderItemToProduct", fields: [productId], references: [id])

  sizeId String
  size   Size   @relation("OrderItemToSize", fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation("OrderItemToColor", fields: [colorId], references: [id])

  @@index([sizeId])
  @@index([orderId])
  @@index([storeId])
  @@index([colorId])
  @@index([productId])
}
